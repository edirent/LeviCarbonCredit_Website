/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jmZRWx7iGXQ63kqiJRikGa
// Component: aiGRgIr7-PiM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: vqrRo-9PQgRP/component
import Section from "../../Section"; // plasmic-import: eNqzgTq-Aev_/component
import Faq from "../../Faq"; // plasmic-import: a8e9ed5ESM1g/component
import Footer from "../../Footer"; // plasmic-import: AXdv3AGvioFd/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: jmZRWx7iGXQ63kqiJRikGa/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: jmZRWx7iGXQ63kqiJRikGa/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: jmZRWx7iGXQ63kqiJRikGa/projectcss
import sty from "./PlasmicDocs.module.css"; // plasmic-import: aiGRgIr7-PiM/css

createPlasmicElementProxy;

export type PlasmicDocs__VariantMembers = {};
export type PlasmicDocs__VariantsArgs = {};
type VariantPropType = keyof PlasmicDocs__VariantsArgs;
export const PlasmicDocs__VariantProps = new Array<VariantPropType>();

export type PlasmicDocs__ArgsType = {};
type ArgPropType = keyof PlasmicDocs__ArgsType;
export const PlasmicDocs__ArgProps = new Array<ArgPropType>();

export type PlasmicDocs__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  pricingSection?: Flex__<typeof Section>;
  img?: Flex__<typeof PlasmicImg__>;
  faqSection?: Flex__<typeof Section>;
  freeBox?: Flex__<"div">;
  text?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultDocsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDocs__RenderFunc(props: {
  variants: PlasmicDocs__VariantsArgs;
  args: PlasmicDocs__ArgsType;
  overrides: PlasmicDocs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Section
            data-plasmic-name={"pricingSection"}
            data-plasmic-override={overrides.pricingSection}
            className={classNames("__wab_instance", sty.pricingSection)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={
              "Levi Carbon Tech turns China\u2019s fragmented, low-cost CCERs into standardized, auditable, deliverable climate assets. We bridge illiquid domestic supply with global ESG demand via a Hong Kong SPV and third-party verification."
            }
            title={"What is Levi Carbon Credit"}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/simple_light_landing_page/images/pipelineRemovebgPreviewPng.png",
                fullWidth: 582,
                fullHeight: 429,
                aspectRatio: undefined
              }}
            />
          </Section>
          <Section
            data-plasmic-name={"faqSection"}
            data-plasmic-override={overrides.faqSection}
            className={classNames("__wab_instance", sty.faqSection)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={null}
            title={"FAQ"}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <Faq
                className={classNames("__wab_instance", sty.faq__snHpB)}
                slot={
                  "We aggregate and verify CCERs, standardize them through an HK SPV, then issue investable products (RWA tokens or green notes). Revenue comes from issuance, custody, and transaction fees."
                }
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"What is your business model?"}
                </div>
              </Faq>
              <Faq
                className={classNames("__wab_instance", sty.faq__zewya)}
                slot={
                  "They represent economic rights in CCER pools, not direct ownership of credits. Each token is backed by bilingual contracts, third-party verification, and USD escrow."
                }
              >
                {"How are RWA tokens different from carbon credits?"}
              </Faq>
              <Faq
                className={classNames("__wab_instance", sty.faq__kokd)}
                slot={
                  "Base case projects ~29% IRR and USD 106 NPV per RWA (12% discount rate) on a 150k-ton pool. Main risks are policy, liquidity (OTC/P2P only), and compliance (KYC/AML, cross-border rules)."
                }
              >
                {"What are the potential returns and key risks?"}
              </Faq>
              <Faq
                className={classNames("__wab_instance", sty.faq___2Tw7L)}
                slot={
                  "Yes\u2014whole units only, and the new holder must register and pass KYC/AML. No public exchange; transfers occur via OTC/P2P, with optional Levi intermediation for a fee."
                }
              >
                {"Can tokens be transferred or traded?"}
              </Faq>
            </div>
          </Section>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "pricingSection",
    "img",
    "faqSection",
    "freeBox",
    "text",
    "footer"
  ],
  header: ["header"],
  pricingSection: ["pricingSection", "img"],
  img: ["img"],
  faqSection: ["faqSection", "freeBox", "text"],
  freeBox: ["freeBox", "text"],
  text: ["text"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  pricingSection: typeof Section;
  img: typeof PlasmicImg__;
  faqSection: typeof Section;
  freeBox: "div";
  text: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDocs__VariantsArgs;
    args?: PlasmicDocs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDocs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDocs__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDocs__ArgProps,
          internalVariantPropNames: PlasmicDocs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDocs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDocs";
  } else {
    func.displayName = `PlasmicDocs.${nodeName}`;
  }
  return func;
}

export const PlasmicDocs = Object.assign(
  // Top-level PlasmicDocs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    pricingSection: makeNodeComponent("pricingSection"),
    img: makeNodeComponent("img"),
    faqSection: makeNodeComponent("faqSection"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicDocs
    internalVariantProps: PlasmicDocs__VariantProps,
    internalArgProps: PlasmicDocs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDocs;
/* prettier-ignore-end */
