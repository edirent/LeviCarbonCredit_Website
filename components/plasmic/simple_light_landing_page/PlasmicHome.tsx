/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jmZRWx7iGXQ63kqiJRikGa
// Component: _rvTOzJcbFW9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: vqrRo-9PQgRP/component
import Section from "../../Section"; // plasmic-import: eNqzgTq-Aev_/component
import Button from "../../Button"; // plasmic-import: y3U_N4aJyi0Y/component
import FeatureCard from "../../FeatureCard"; // plasmic-import: yFKCfwLmSIjV/component
import HomeCta from "../../HomeCta"; // plasmic-import: MLJGbm8DbLwF/component
import Footer from "../../Footer"; // plasmic-import: AXdv3AGvioFd/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: jmZRWx7iGXQ63kqiJRikGa/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: jmZRWx7iGXQ63kqiJRikGa/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: jmZRWx7iGXQ63kqiJRikGa/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: _rvTOzJcbFW9/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 47lHVTsG3fpY/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: y98FqGtZArYH/icon
import LightningIcon from "./icons/PlasmicIcon__Lightning"; // plasmic-import: mOdf6vf5omO6/icon
import HammerIcon from "./icons/PlasmicIcon__Hammer"; // plasmic-import: NlzV7nw6zRcG/icon
import PencilIcon from "./icons/PlasmicIcon__Pencil"; // plasmic-import: y0Je22d1khXA/icon

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  topSection?: Flex__<typeof Section>;
  solutions?: Flex__<typeof Section>;
  columns?: Flex__<"div">;
  validation?: Flex__<typeof Section>;
  homeCta?: Flex__<typeof HomeCta>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomeProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Section
            data-plasmic-name={"topSection"}
            data-plasmic-override={overrides.topSection}
            className={classNames("__wab_instance", sty.topSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__xao6B)}>
              <div className={classNames(projectcss.all, sty.freeBox__wdSAt)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___85T8O)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qlQpP
                    )}
                  >
                    {"The future of "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5Nsin
                    )}
                  >
                    {"Carbon Credit"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3O3Uc
                  )}
                >
                  {
                    "Levi Carbon Technology builds cross-border liquidity for carbon markets. From CCER acquisition in China to SPV issuance in Hong Kong, and global ESG capital inflows."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vdZvz)}>
                <Button
                  className={classNames("__wab_instance", sty.button__xyd8V)}
                  color={"blue"}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg___4Snwr)}
                      role={"img"}
                    />
                  }
                  showEndIcon={true}
                  submitsForm={true}
                >
                  {"Check credit pools"}
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button___3Q6Ld)}
                  submitsForm={true}
                >
                  {"Docs"}
                </Button>
              </div>
            </div>
          </Section>
          <Section
            data-plasmic-name={"solutions"}
            data-plasmic-override={overrides.solutions}
            className={classNames("__wab_instance", sty.solutions)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={null}
            title={null}
          >
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column___9EbGt)}>
                <div className={classNames(projectcss.all, sty.freeBox__glQ9)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vJp51
                    )}
                  >
                    {"Why Levi Carbon Credit"}
                  </div>
                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard___1YwkO
                    )}
                    description={
                      "Connects undervalued CCER carbon credits from China to global markets via Hong Kong/Singapore SPVs, opening a new RWA channel."
                    }
                    iconBack={
                      <LightningIcon
                        className={classNames(projectcss.all, sty.svg__oLwZq)}
                        role={"img"}
                      />
                    }
                    long={true}
                    title={"\ud83c\udf3f China Carbon Bridge"}
                  />

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard__h30Rq
                    )}
                    description={
                      "Delivers stable yield from periodic cashflows while offering long-term upside from China\u2019s carbon market repricing."
                    }
                    iconBack={
                      <LightningIcon
                        className={classNames(projectcss.all, sty.svg__b19Fv)}
                        role={"img"}
                      />
                    }
                    long={true}
                    title={"\ud83d\udcb0 Dual Value Capture"}
                  />

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard__hFftp
                    )}
                    description={
                      "Combines SPV custody, third-party audits, and on-chain contracts to ensure verifiable, scalable, and investor-protected flows."
                    }
                    iconBack={
                      <HammerIcon
                        className={classNames(projectcss.all, sty.svg___6MoT8)}
                        role={"img"}
                      />
                    }
                    long={true}
                    title={"\ud83d\udd12 Transparent & Secure Structure"}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__mYiiA)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__nXaH)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/simple_light_landing_page/images/vangoghmuseumS0176V1962800Jpg.jpg",
                    fullWidth: 800,
                    fullHeight: 632,
                    aspectRatio: undefined
                  }}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__qnmmk
                  )}
                  description={
                    "Bridges institutional ESG capital and DeFi RWA liquidity platforms, uniting two massive pools of demand into one investable token."
                  }
                  iconBack={
                    <PencilIcon
                      className={classNames(projectcss.all, sty.svg__iYoUf)}
                      role={"img"}
                    />
                  }
                  long={true}
                  title={"\ud83c\udf0d Global ESG + Crypto Demand Fit"}
                />
              </div>
            </div>
          </Section>
          <Section
            data-plasmic-name={"validation"}
            data-plasmic-override={overrides.validation}
            className={classNames("__wab_instance", sty.validation)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={null}
            title={"We are collaborating with multiple industry leaders."}
          >
            <div className={classNames(projectcss.all, sty.freeBox__cMev8)}>
              <div className={classNames(projectcss.all, sty.freeBox__ndxeu)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__zjieT)}
                  displayHeight={"154px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/simple_light_landing_page/images/imageRemovebgPreview1Png.png",
                    fullWidth: 273,
                    fullHeight: 271,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__okhQx)}
                  displayHeight={"152px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"145px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/simple_light_landing_page/images/image2.png",
                    fullWidth: 225,
                    fullHeight: 225,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__yJgm)}
                  displayHeight={"150px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/simple_light_landing_page/images/imageRemovebgPreviewPng.png",
                    fullWidth: 500,
                    fullHeight: 500,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </Section>
          <HomeCta
            data-plasmic-name={"homeCta"}
            data-plasmic-override={overrides.homeCta}
            className={classNames("__wab_instance", sty.homeCta)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "topSection",
    "solutions",
    "columns",
    "validation",
    "homeCta",
    "footer"
  ],
  header: ["header"],
  topSection: ["topSection"],
  solutions: ["solutions", "columns"],
  columns: ["columns"],
  validation: ["validation"],
  homeCta: ["homeCta"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  topSection: typeof Section;
  solutions: typeof Section;
  columns: "div";
  validation: typeof Section;
  homeCta: typeof HomeCta;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    topSection: makeNodeComponent("topSection"),
    solutions: makeNodeComponent("solutions"),
    columns: makeNodeComponent("columns"),
    validation: makeNodeComponent("validation"),
    homeCta: makeNodeComponent("homeCta"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
